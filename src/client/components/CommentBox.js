import React from 'react';
import axios from 'axios';
import CommentForm from './CommentForm';
import CommentList from './CommentList';

export default class CommentBox extends React.Component{
  constructor(props) {
    super(props);

    this.state = {
      data: []
    };

    this.loadCommentsFromServer = this.loadCommentsFromServer.bind(this);
    this.toggleCommentUpdate = this.toggleCommentUpdate.bind(this);
    this.handleCommentSubmit = this.handleCommentSubmit.bind(this);
    this.handleCommentUpdate = this.handleCommentUpdate.bind(this);
    this.handleCommentDelete = this.handleCommentDelete.bind(this);
  }

  loadCommentsFromServer() {
    axios.get(this.props.url).then((response)=>{
      this.setState({data: response.data});
    }).catch((err)=>{
      console.error(this.props.url, status, err.toString());
    });
  }
  
  componentDidMount() {
  	this.loadCommentsFromServer();
    // setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  }

  handleCommentSubmit(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    
    axios.post(this.props.url, comment).then((response)=>{
      var newComments = comments.concat([response.data]);
      this.setState({data: newComments});

    }).catch((err)=>{
      this.setState({data: comments});
      console.error(this.props.url, status, err.toString());
    });
  }

  toggleCommentUpdate(editComment) {
    var comments = this.state.data.map(function(comment) {
      if(comment._id == editComment._id) {
        comment.editing = !comment.editing;
      }
      return comment;
    });

    this.setState({data:comments});
  }

  handleCommentUpdate(comment) {
    var comments = this.state.data;
    axios.put(this.props.url+'/'+comment._id, comment).then((response)=>{
      this.toggleCommentUpdate(comment);
    }).catch((err)=>{
      this.setState({data:comments});
      console.error(this.props.url, status, err.toString());
    });
  }

  handleCommentDelete(comment) {
    var comments = this.state.data;

    axios.delete(this.props.url+'/'+comment._id).then((response)=>{
      if(response.status == '204'){
        comments = comments.filter((c) => c.id!==comment.id);
        this.setState({data: comments});
      }
    }).catch((err)=>{
      this.setState({data: comments});
      console.error(this.props.url, status, err.toString());
    });
  }
  
  render() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} 
          toggleCommentUpdate={this.toggleCommentUpdate}
          onCommentUpdate={this.handleCommentUpdate}
          onCommentDelete={this.handleCommentDelete} 
        />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
}